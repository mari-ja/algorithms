#include <stdlib.h>
#include <stdio.h>
#include <string.h>


struct el {
	char name[80 + 1];
	int grade;
};
typedef struct el element;

struct n {
	element elem;
	struct n *next;
	struct n *prev;
};
typedef struct n node;



int addToDoubleList(element student, node **head, node **tail) {
	node *tmp, *new_elem;

	new_elem = (node *)malloc(sizeof(node));
	if (new_elem == NULL)
		return 0;
	new_elem->elem = student;
	
	if (*head == NULL) { 
		new_elem->next = NULL;
		new_elem->prev = NULL;
		*head = *tail = new_elem;
	}
	else if ((*head)->elem.grade >= student.grade) {
		new_elem->next = *head;
		new_elem->prev = NULL;
		(*head)->prev = new_elem;
		*head = new_elem;
	}
	else{
		// Addition of a new element after an existing one when:
		// a) the exiting one is the last element in the list (tail must be changed)
		// b) the grade of the next element is larger than or equal to the grade of the new element	
		for (tmp = *head; tmp->next && (tmp->next)->elem.grade < student.grade; tmp = tmp->next); {
			new_elem->next = tmp->next;
		}
		new_elem->prev = tmp;
		tmp->next = new_elem;

		if (tmp == *tail) { //a) the exiting one is the last element in the list	
			*tail = new_elem;
		}
		else { //new_elem->next != NULL
			new_elem->next->prev = new_elem;
		}
	}
	return 1;
}


void merge(node **head1, node **tail1, node**head2, node **tail2) {

	node *curr;
	node *prev;
	node *head;

	if ((*head1)->elem.grade <= (*head2)->elem.grade) 
		head = prev = *head1;
	else 
		head = prev = *head2;

	while (1) {
				
		if ((*head1 == NULL) && (*head2 != NULL)) {
			prev->next = *head2;
			(*head2)->prev = prev;
			*tail1 = *tail2;
			break;
		}
		else if ((*head2 == NULL) && (*head1 != NULL)) {
			prev->next = *head1;
			(*head1)->prev = prev;
			*tail2 = *tail1;
			break;
		}		
		if ((*head1)->elem.grade <= (*head2)->elem.grade) {
			curr = *head1;
			*head1 = (*head1)->next;
			if (*head1) (*head1)->prev = NULL;
		}
		else {
			curr = *head2;
			*head2 = curr->next;
			if (*head2) (*head2)->prev = NULL;
		}
		if (curr) curr->next = NULL;
		
		if (curr == head){
			curr->prev = NULL;
			prev->next = NULL;
		}
		else{
			curr->prev = prev;
			prev->next = curr;
			prev = prev->next;
		}
	}
	
	*head1 = *head2 = head;
}


void printList(node *head) {
	while (head != NULL) {
		printf("Student: %s, Grade: %d; ---> ", head->elem.name, head->elem.grade);
		head = head->next;
	}
}


int main() {

	node *head1 = NULL, *head2 = NULL;
	node *tail1 = NULL, *tail2 = NULL;
	char name[80 + 1];
	char c;
	int grade;
		
	while (1) {

		printf("Enter student name:\n");
		scanf("%s", &name);
		printf("Enter student grade:\n");
		scanf("%d", &grade);

		element student;
		strcpy(student.name, name);
		student.grade = grade;

		getchar();
		printf("Type 'y' if you wish to add a student to the first list. Otherwise, the student will be added to the second list.\n");
		c = getchar();
		if (c == 'y')
			addToDoubleList(student, &head1, &tail1);
		else
			addToDoubleList(student, &head2, &tail2);

		getchar();
		printf("Add new student? Type y/n\n");
		c = getchar();
		if (c == 'n')
			break;

	}
	printf("LIST 1: \n");
	printList(head1);
	printf("\n");


	printf("LIST 2: \n");
	printList(head2);
	printf("\n");

	merge(&head1, &tail1, &head2, &tail2);
	printf("after merging lists...");

	printf("LIST 1: \n");
	printList(head1);
	printf("\n");


	printf("LIST 2: \n");
	printList(head2);
	printf("\n");



	
}
